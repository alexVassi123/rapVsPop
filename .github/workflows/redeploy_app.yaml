name: Runtime deploy to k3d
on:
  push:
    branches: [main]
    paths:
      - "app/frontend/**"
      - "app/backend/**"
      - "app/defaultbackend/**"
      - "k8s/**"
      - "nginx/**"
      - "compose.yaml"
      - ".github/workflows/redeploy_app.yaml"
jobs:
  filter:
    runs-on: ubuntu-latest
    outputs:

      backend_changed: ${{ steps.filter.outputs.backend_changed }}
      frontend_changed: ${{ steps.filter.outputs.frontend_changed }}
      k8s_changed: ${{ steps.filter.outputs.k8s_changed }}
      nginx_changed: ${{ steps.filter.outputs.nginx_changed }}
      defaultbackend: ${{ steps.filter.outputs.defaultbackend_changed }}

    steps:
    - uses: actions/checkout@v4
    - name: check changed files
      id: filter
      uses: dorny/paths-filter@v3.0.2
      with: 
        
        filters: |
          backend_changed:
            - 'app/backend/**'
          frontend_changed:
            - 'app/frontend/**'
          k8s_changed:
            - 'k8s/**'
          nginx_changed:
            - 'nginx/**'
          defaultbackend_changed:
            - 'app/defaultbackend/**'
          
  redeploy:
    needs: filter
    runs-on: self-hosted          
    env:
      IMAGE_TAG: ${{ github.sha }}
    steps:

    - uses: actions/checkout@v4

    - name: Login to Docker registry
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: run npm install & build for frontend
      run: |
        cd app/frontend/genre-classifier
        npm install
        npm run build

    - name: docker compose build & push
      run: |
        docker compose build
        docker compose push
      
      
    - name: set up kubectl
      uses: azure/k8s-set-context@v1
      with: 
        kubeconfig: ${{ secrets.KUBECONFIG }}

    - name: Use genre-cluster namespace
      run: kubectl config set-context --current --namespace=genre-cluster

    - name: Apply updated Kubernetes manifests
      if: needs.filter.outputs.k8s_changed == 'true'
      run: |
        kubectl apply -f k8s/

    - name: Roll backend deployment if new image
      if: needs.filter.outputs.backend_changed == 'true'
      run: |
        kubectl set image deployment/backend-api \
          backend-api=vasale01/backend:${IMAGE_TAG}
        kubectl rollout status deployment/backend-api

    - name: Roll frontend deployment if new image
      if: needs.filter.outputs.frontend_changed == 'true'
      run: |
        kubectl set image deployment/frontend \
          frontend=vasale01/frontend:${IMAGE_TAG}
        kubectl rollout status deployment/frontend
      
    - name: Roll default backend deployment if new image
      if: needs.filter.outputs.defaultbackend_changed == 'true'
      run: |
        kubectl set image deployment/default-backend \
          default-backend=vasale01/defaultbackend:${IMAGE_TAG}
        kubectl rollout status deployment/default-backend

    - name: Roll nginx deployment if new image
      if: needs.filter.outputs.nginx_changed == 'true'
      run: |
        kubectl set image deployment/nginx \
          nginx=vasale01/nginx:${IMAGE_TAG}
        kubectl rollout status deployment/nginx

    - name: Restart pods after manifest-only changes
      if: needs.filter.outputs.k8s_changed == 'true'
      run: |
        kubectl rollout restart deployment/backend-api
        kubectl rollout restart deployment/frontend
        kubectl rollout restart deployment/default-backend
        kubectl rollout restart deployment/nginx

###